// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using SaidalyTechMain.DB_Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SaidalyTechMain.DB_Models
{
    public partial class PharmacySystemContext
    {
        private IPharmacySystemContextProcedures _procedures;

        public virtual IPharmacySystemContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PharmacySystemContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPharmacySystemContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EmptyDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPCustomerBalanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPDelegatesReportBetweenDateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPDelegatesReportBetweenShiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPDelegatesReportWithIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPDelegatesReportWithIdBetweenDateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SpGetCustomerBalanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPGetSaleItemBetweenShiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPGetSaleItemInSheftBetweenDateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPGetSaleItemInSheftBetweenDateAndUserIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPGetSaleItemInSheftByIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPGetSaleItemInSheftByUserIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SpGetSupplierBalanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SpProfitAndLosesResult>().HasNoKey().ToView(null);
        }
    }

    public partial class PharmacySystemContextProcedures : IPharmacySystemContextProcedures
    {
        private readonly PharmacySystemContext _context;

        public PharmacySystemContextProcedures(PharmacySystemContext context)
        {
            _context = context;
        }

        public virtual async Task<List<EmptyDataResult>> EmptyDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmptyDataResult>("EXEC @returnValue = [dbo].[EmptyData]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPCustomerBalanceResult>> SPCustomerBalanceAsync(int? CustomerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPCustomerBalanceResult>("EXEC @returnValue = [dbo].[SPCustomerBalance] @CustomerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPDelegatesReportBetweenDateResult>> SPDelegatesReportBetweenDateAsync(DateTime? DateFrom, DateTime? DateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPDelegatesReportBetweenDateResult>("EXEC @returnValue = [dbo].[SPDelegatesReportBetweenDate] @DateFrom, @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPDelegatesReportBetweenShiftsResult>> SPDelegatesReportBetweenShiftsAsync(int? ShiftFrom, int? ShiftTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ShiftFrom",
                    Value = ShiftFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShiftTo",
                    Value = ShiftTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPDelegatesReportBetweenShiftsResult>("EXEC @returnValue = [dbo].[SPDelegatesReportBetweenShifts] @ShiftFrom, @ShiftTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPDelegatesReportWithIdResult>> SPDelegatesReportWithIdAsync(int? DelegateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DelegateId",
                    Value = DelegateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPDelegatesReportWithIdResult>("EXEC @returnValue = [dbo].[SPDelegatesReportWithId] @DelegateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPDelegatesReportWithIdBetweenDateResult>> SPDelegatesReportWithIdBetweenDateAsync(int? DelegateId, DateTime? DateFrom, DateTime? DateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DelegateId",
                    Value = DelegateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPDelegatesReportWithIdBetweenDateResult>("EXEC @returnValue = [dbo].[SPDelegatesReportWithIdBetweenDate] @DelegateId, @DateFrom, @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetCustomerBalanceResult>> SpGetCustomerBalanceAsync(int? CustomerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetCustomerBalanceResult>("EXEC @returnValue = [dbo].[SpGetCustomerBalance] @CustomerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPGetSaleItemBetweenShiftsResult>> SPGetSaleItemBetweenShiftsAsync(int? IdFrom, int? IdTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdFrom",
                    Value = IdFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTo",
                    Value = IdTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPGetSaleItemBetweenShiftsResult>("EXEC @returnValue = [dbo].[SPGetSaleItemBetweenShifts] @IdFrom, @IdTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPGetSaleItemInSheftBetweenDateResult>> SPGetSaleItemInSheftBetweenDateAsync(DateTime? DateFrom, DateTime? DateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPGetSaleItemInSheftBetweenDateResult>("EXEC @returnValue = [dbo].[SPGetSaleItemInSheftBetweenDate] @DateFrom, @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPGetSaleItemInSheftBetweenDateAndUserIdResult>> SPGetSaleItemInSheftBetweenDateAndUserIdAsync(DateTime? DateFrom, DateTime? DateTo, string UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = 2,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPGetSaleItemInSheftBetweenDateAndUserIdResult>("EXEC @returnValue = [dbo].[SPGetSaleItemInSheftBetweenDateAndUserId] @DateFrom, @DateTo, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPGetSaleItemInSheftByIdResult>> SPGetSaleItemInSheftByIdAsync(int? SheftId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SheftId",
                    Value = SheftId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPGetSaleItemInSheftByIdResult>("EXEC @returnValue = [dbo].[SPGetSaleItemInSheftById] @SheftId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPGetSaleItemInSheftByUserIdResult>> SPGetSaleItemInSheftByUserIdAsync(int? SheftId, string UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SheftId",
                    Value = SheftId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = 2,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPGetSaleItemInSheftByUserIdResult>("EXEC @returnValue = [dbo].[SPGetSaleItemInSheftByUserId] @SheftId, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetSupplierBalanceResult>> SpGetSupplierBalanceAsync(int? SupplierId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SupplierId",
                    Value = SupplierId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetSupplierBalanceResult>("EXEC @returnValue = [dbo].[SpGetSupplierBalance] @SupplierId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpProfitAndLosesResult>> SpProfitAndLosesAsync(DateTime? dateFrom, DateTime? dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpProfitAndLosesResult>("EXEC @returnValue = [dbo].[SpProfitAndLoses] @dateFrom, @dateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
